struct LowState
{
    int8_t levelFlag;                 // flag to distinguish high level or low level
    int16_t commVersion;
    int16_t robotID;
    int32_t SN;
    int8_t bandWidth;
    IMU imu;
    MotorState motorState[20];
    BmsState bms;
    int16_t footForce[4];              // force sensors
    int16_t footForceEst[4];           // force sensors
    int32_t tick;                     // reference real-time from motion controller (unit: us)
    int8_t wirelessRemote[40];        // wireless commands
    int32_t reserve;
    int32_t crc;
}

struct MotorState
{
    int8_t mode;                      // motor working mode
    float q;                           // current angle (unit: radian)
    float dq;                          // current velocity (unit: radian/second)
    float ddq;                         // current acc (unit: radian/second*second)
    float tauEst;                      // current estimated output torque (unit: N.m)
    float q_raw;                       // current angle (unit: radian)
    float dq_raw;                      // current velocity (unit: radian/second)
    float ddq_raw;
    int8_t temperature;                // current temperature (temperature conduction is slow that leads to lag)
    int32_t reserve[2];
}

struct BmsState
{
    int8_t version_h;
    int8_t version_l;
    int8_t bms_status;
    int8_t SOC;                       // SOC 0-100%
    int32_t current;                   // mA
    int16_t cycle;
    int8_t BQ_NTC[2];                  // x1 degrees centigrade
    int8_t MCU_NTC[2];                 // x1 degrees centigrade
    int16_t cell_vol[10];             // cell voltage mV
}

struct IMU
{
    float quaternion[4];               // quaternion, normalized, (w,x,y,z)
    float gyroscope[3];                // angular velocity （unit: rad/s)    (raw data)
    float accelerometer[3];            // m/(s2)                             (raw data)
    float rpy[3];                      // euler angle（unit: rad)
    int8_t temperature;
}                               // when under accelerated motion, the attitude of the robot calculated by IMU will drift.
