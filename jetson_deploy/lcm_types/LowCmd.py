"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from lcm_types.MotorCmd import MotorCmd

from lcm_types.BmsCmd import BmsCmd

class LowCmd(object):
    __slots__ = ["levelFlag", "commVersion", "robotID", "SN", "bandWidth", "motorCmd", "bms", "wirelessRemote", "reserve", "crc"]

    def __init__(self):
        self.levelFlag = 0
        self.commVersion = 0
        self.robotID = 0
        self.SN = 0
        self.bandWidth = 0
        self.motorCmd = [ MotorCmd() for dim0 in range(20) ]
        self.bms = BmsCmd()
        self.wirelessRemote = [ 0 for dim0 in range(40) ]
        self.reserve = 0
        self.crc = 0

    def encode(self):
        buf = BytesIO()
        buf.write(LowCmd._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bhhib", self.levelFlag, self.commVersion, self.robotID, self.SN, self.bandWidth))
        for i0 in range(20):
            assert self.motorCmd[i0]._get_packed_fingerprint() == MotorCmd._get_packed_fingerprint()
            self.motorCmd[i0]._encode_one(buf)
        assert self.bms._get_packed_fingerprint() == BmsCmd._get_packed_fingerprint()
        self.bms._encode_one(buf)
        buf.write(struct.pack('>40b', *self.wirelessRemote[:40]))
        buf.write(struct.pack(">ii", self.reserve, self.crc))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != LowCmd._get_packed_fingerprint():
            raise ValueError("Decode error")
        return LowCmd._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = LowCmd()
        self.levelFlag, self.commVersion, self.robotID, self.SN, self.bandWidth = struct.unpack(">bhhib", buf.read(10))
        self.motorCmd = []
        for i0 in range(20):
            self.motorCmd.append(MotorCmd._decode_one(buf))
        self.bms = BmsCmd._decode_one(buf)
        self.wirelessRemote = struct.unpack('>40b', buf.read(40))
        self.reserve, self.crc = struct.unpack(">ii", buf.read(8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if LowCmd in parents: return 0
        newparents = parents + [LowCmd]
        tmphash = (0x6116384206ddab8e+ MotorCmd._get_hash_recursive(newparents)+ BmsCmd._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if LowCmd._packed_fingerprint is None:
            LowCmd._packed_fingerprint = struct.pack(">Q", LowCmd._get_hash_recursive([]))
        return LowCmd._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

