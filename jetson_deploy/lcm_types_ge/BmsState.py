"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class BmsState(object):
    __slots__ = ["version_h", "version_l", "bms_status", "SOC", "current", "cycle", "BQ_NTC", "MCU_NTC", "cell_vol"]

    __typenames__ = ["int8_t", "int8_t", "int8_t", "int8_t", "int32_t", "int16_t", "int8_t", "int8_t", "int16_t"]

    __dimensions__ = [None, None, None, None, None, None, [2], [2], [10]]

    def __init__(self):
        self.version_h = 0
        self.version_l = 0
        self.bms_status = 0
        self.SOC = 0
        self.current = 0
        self.cycle = 0
        self.BQ_NTC = [ 0 for dim0 in range(2) ]
        self.MCU_NTC = [ 0 for dim0 in range(2) ]
        self.cell_vol = [ 0 for dim0 in range(10) ]

    def encode(self):
        buf = BytesIO()
        buf.write(BmsState._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bbbbih", self.version_h, self.version_l, self.bms_status, self.SOC, self.current, self.cycle))
        buf.write(struct.pack('>2b', *self.BQ_NTC[:2]))
        buf.write(struct.pack('>2b', *self.MCU_NTC[:2]))
        buf.write(struct.pack('>10h', *self.cell_vol[:10]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != BmsState._get_packed_fingerprint():
            raise ValueError("Decode error")
        return BmsState._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = BmsState()
        self.version_h, self.version_l, self.bms_status, self.SOC, self.current, self.cycle = struct.unpack(">bbbbih", buf.read(10))
        self.BQ_NTC = struct.unpack('>2b', buf.read(2))
        self.MCU_NTC = struct.unpack('>2b', buf.read(2))
        self.cell_vol = struct.unpack('>10h', buf.read(20))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if BmsState in parents: return 0
        tmphash = (0xc7685357ce7fdace) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if BmsState._packed_fingerprint is None:
            BmsState._packed_fingerprint = struct.pack(">Q", BmsState._get_hash_recursive([]))
        return BmsState._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

