"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import MotorState

import BmsState

import IMU

class LowState(object):
    __slots__ = ["levelFlag", "commVersion", "robotID", "SN", "bandWidth", "imu", "motorState", "bms", "footForce", "footForceEst", "tick", "wirelessRemote", "reserve", "crc"]

    __typenames__ = ["int8_t", "int16_t", "int16_t", "int32_t", "int8_t", "IMU", "MotorState", "BmsState", "int16_t", "int16_t", "int32_t", "int8_t", "int32_t", "int32_t"]

    __dimensions__ = [None, None, None, None, None, None, [20], None, [4], [4], None, [40], None, None]

    def __init__(self):
        self.levelFlag = 0
        self.commVersion = 0
        self.robotID = 0
        self.SN = 0
        self.bandWidth = 0
        self.imu = IMU()
        self.motorState = [ MotorState() for dim0 in range(20) ]
        self.bms = BmsState()
        self.footForce = [ 0 for dim0 in range(4) ]
        self.footForceEst = [ 0 for dim0 in range(4) ]
        self.tick = 0
        self.wirelessRemote = [ 0 for dim0 in range(40) ]
        self.reserve = 0
        self.crc = 0

    def encode(self):
        buf = BytesIO()
        buf.write(LowState._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bhhib", self.levelFlag, self.commVersion, self.robotID, self.SN, self.bandWidth))
        assert self.imu._get_packed_fingerprint() == IMU._get_packed_fingerprint()
        self.imu._encode_one(buf)
        for i0 in range(20):
            assert self.motorState[i0]._get_packed_fingerprint() == MotorState._get_packed_fingerprint()
            self.motorState[i0]._encode_one(buf)
        assert self.bms._get_packed_fingerprint() == BmsState._get_packed_fingerprint()
        self.bms._encode_one(buf)
        buf.write(struct.pack('>4h', *self.footForce[:4]))
        buf.write(struct.pack('>4h', *self.footForceEst[:4]))
        buf.write(struct.pack(">i", self.tick))
        buf.write(struct.pack('>40b', *self.wirelessRemote[:40]))
        buf.write(struct.pack(">ii", self.reserve, self.crc))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != LowState._get_packed_fingerprint():
            raise ValueError("Decode error")
        return LowState._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = LowState()
        self.levelFlag, self.commVersion, self.robotID, self.SN, self.bandWidth = struct.unpack(">bhhib", buf.read(10))
        self.imu = IMU._decode_one(buf)
        self.motorState = []
        for i0 in range(20):
            self.motorState.append(MotorState._decode_one(buf))
        self.bms = BmsState._decode_one(buf)
        self.footForce = struct.unpack('>4h', buf.read(8))
        self.footForceEst = struct.unpack('>4h', buf.read(8))
        self.tick = struct.unpack(">i", buf.read(4))[0]
        self.wirelessRemote = struct.unpack('>40b', buf.read(40))
        self.reserve, self.crc = struct.unpack(">ii", buf.read(8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if LowState in parents: return 0
        newparents = parents + [LowState]
        tmphash = (0x9dc8784e21372391+ IMU._get_hash_recursive(newparents)+ MotorState._get_hash_recursive(newparents)+ BmsState._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if LowState._packed_fingerprint is None:
            LowState._packed_fingerprint = struct.pack(">Q", LowState._get_hash_recursive([]))
        return LowState._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

