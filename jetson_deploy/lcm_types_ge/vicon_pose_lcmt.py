"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class vicon_pose_lcmt(object):
    __slots__ = ["translation", "rotation", "euler", "linear_velocity", "angular_velocity", "seq", "stamp_secs", "stamp_nsecs", "timestamp_us"]

    __typenames__ = ["float", "float", "float", "float", "float", "int32_t", "int32_t", "int32_t", "int64_t"]

    __dimensions__ = [[3], [4], [3], [3], [3], None, None, None, None]

    def __init__(self):
        self.translation = [ 0.0 for dim0 in range(3) ]
        self.rotation = [ 0.0 for dim0 in range(4) ]
        self.euler = [ 0.0 for dim0 in range(3) ]
        self.linear_velocity = [ 0.0 for dim0 in range(3) ]
        self.angular_velocity = [ 0.0 for dim0 in range(3) ]
        self.seq = 0
        self.stamp_secs = 0
        self.stamp_nsecs = 0
        self.timestamp_us = 0

    def encode(self):
        buf = BytesIO()
        buf.write(vicon_pose_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>3f', *self.translation[:3]))
        buf.write(struct.pack('>4f', *self.rotation[:4]))
        buf.write(struct.pack('>3f', *self.euler[:3]))
        buf.write(struct.pack('>3f', *self.linear_velocity[:3]))
        buf.write(struct.pack('>3f', *self.angular_velocity[:3]))
        buf.write(struct.pack(">iiiq", self.seq, self.stamp_secs, self.stamp_nsecs, self.timestamp_us))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != vicon_pose_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return vicon_pose_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = vicon_pose_lcmt()
        self.translation = struct.unpack('>3f', buf.read(12))
        self.rotation = struct.unpack('>4f', buf.read(16))
        self.euler = struct.unpack('>3f', buf.read(12))
        self.linear_velocity = struct.unpack('>3f', buf.read(12))
        self.angular_velocity = struct.unpack('>3f', buf.read(12))
        self.seq, self.stamp_secs, self.stamp_nsecs, self.timestamp_us = struct.unpack(">iiiq", buf.read(20))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if vicon_pose_lcmt in parents: return 0
        tmphash = (0xee56ae0c49f3d161) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if vicon_pose_lcmt._packed_fingerprint is None:
            vicon_pose_lcmt._packed_fingerprint = struct.pack(">Q", vicon_pose_lcmt._get_hash_recursive([]))
        return vicon_pose_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

